import re
import datetime
from pydantic import Field, validator

from . import BaseModel

class ClientBase(BaseModel):
    client_name: str = Field(..., title="Client Name", description="Client name for identify with OAuth2 authorization consent")
    redirect_uris: list[str] = Field(..., title="Redirect URI's", description="Redirect URIS list/array for the client")
    
    @validator("client_name")
    def validate_client_name(cls, value: str) -> str:
        if isinstance(value, str):
            if re.match('[0-9]', value):
                raise ValueError("Cannot contain numbers")
            return value
        raise ValueError("Must be a str")
    
    @validator("redirect_uris")
    def validate_redirect_uris(cls, value: list[str]) -> list[str]:
        if isinstance(value, (list[str], str)):
            return value
        raise ValueError("Must be a str or list of strs")

class ClientCreate(ClientBase):
    user_id: str = Field(..., title="Owner", description="The user that was created the client application", allow_mutation=False)
    response_types: list[str] = Field(..., title="Response Type", description="The response that the client waits for")
    grant_types: list[str] = Field(..., title="Flow Type", description="The client's flow used by")
    application_type: str = Field(..., title="Application Type", description="Client application type between 'native' or 'web'")
    contact: str = Field(..., title="Contact", description="Contact email for client owner")
    logo_uri: str = Field(..., title="Logo", description="URI where the client logo is it")
    client_uri: str = Field(..., title="URI", description="The base client domain, it's used for CORS policy")
    policy_uri: str = Field(..., title="Policy", description="URI where the client's policy it's allowed")
    tos_uri: str = Field(..., title="Terms of Service", description="URI where the client's terms of service it's allowed")
    jwks_uri: str = Field(..., title="JWKS URI", description="URI where the client allows JWKS document")
    subject_type: str = Field(..., title="Subject Type", description="Type of the subject between 'public' or 'confidential'")

class ClientModel(ClientCreate):
    _id: str = Field(None, title="ID", description="Unique internal identifier generated by the database")
    client_id: str = Field(..., title="Client ID", description="Unique identifier for the client", allow_mutation=False)
    client_secret: str = Field(..., title="Client Secret", description="Unique key like a password for the client")
    default_max_age: int = Field(1000, title="Max Auth Age", description="Maximun time for authentication")
    is_disabled: bool = Field(False, title="Status", description="Client status for the authorization server"),
    created_at: int = Field(datetime.datetime.now(), title="Created At", description="Time when the client was created")